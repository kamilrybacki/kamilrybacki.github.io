---
import SVG from '@components/StyledSVG.astro';
import BasicPageLayout from '@layouts/BasicPageLayout.astro';
import SplashDecoration from '@components/SplashDecoration';
import Menu from '@components/Menu';
import { theme } from '@root/tailwind.config';

import '@styles/glitch.css';

const indexOptions = [
  {
    name: 'Projects',
    link: '/projects',
    style: 'text-accent text-7xl'
  },
  {
    name: 'Blog',
    link: '/about',
    style: ''
  },
  {
    name: 'Contact',
    link: '/contact',
    style: ''
  }
];
---
<script define:vars={{indexOptions, theme}}>
  const fontsMap = {
    'Projects': 'font-code',
    'Blog': 'font-handwriting',
    'Contact': 'font-display'
  }
  const computeElementCenter = (element) => {
    const centerX = element.getBoundingClientRect().left + element.clientWidth / 2;
    const centerY = element.getBoundingClientRect().top + element.clientHeight;
    return {
      x: centerX,
      y: centerY
    } 
  }

  document.addEventListener('DOMContentLoaded', () => {
    const menuElement = document.getElementById('index-menu');
    const glitchTextElement = document.getElementById('glitch-text');
    const targetPosition = computeElementCenter(glitchTextElement);
    const listElements = [...menuElement.getElementsByTagName('li')];
    const drawPathFromPoints = (points, color, size, dash) => {
      const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      points.forEach((point, index) => {
        const command = index === 0 ? 'M' : 'L';
        path.setAttribute('d', `${path.getAttribute('d') || ''} ${command} ${point.x} ${point.y}`);
      })
      path.setAttribute('fill', 'transparent');
      path.setAttribute('stroke', color);
      path.setAttribute('stroke-width', size);
      dash && path.setAttribute('stroke-dasharray', dash);
      return path;
    }
    const createPathsSVG = () => {
      const svgID = `path-${menuElement.id}`;
      const pathsSVG = document.getElementById(svgID) ? document.getElementById(svgID) : document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      pathsSVG.childNodes && pathsSVG.childNodes.forEach((child) => {
        child.remove();
      })
      pathsSVG.setAttribute('version', '1.1');
      pathsSVG.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
      pathsSVG.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');
      pathsSVG.setAttribute('id', svgID)
      pathsSVG.setAttribute('width', window.innerWidth);
      pathsSVG.setAttribute('height', window.innerHeight);

      const distances = listElements.map((listElement) => {
        const elementCenter = computeElementCenter(listElement);
        return {
          x: Math.abs(targetPosition.x - elementCenter.x),
          y: Math.abs(targetPosition.y - elementCenter.y)
        }
      }).reduce((acc, curr) => {
        return {
          x: Math.max(acc.x, curr.x),
          y: Math.max(acc.y, curr.y)
        }
      }, { x: 0, y: 0 });

      const offsetCoefficient = 0.9;
      const rawPathsData = listElements.map((listElement) => {
        const elementCenter = computeElementCenter(listElement);
        return [
          {
            x: elementCenter.x,
            y: elementCenter.y - menuElement.clientHeight * offsetCoefficient,
          },
          {
            x: elementCenter.x,
            y: elementCenter.y -  menuElement.clientHeight * offsetCoefficient - distances.y / 5,
          },
          {
            x: targetPosition.x,
            y: elementCenter.y -  menuElement.clientHeight * offsetCoefficient - distances.y / 5
          },
          {
            x: targetPosition.x,
            y: targetPosition.y + glitchTextElement.clientHeight * offsetCoefficient - distances.y / 10
          }
        ];
      })

      const canvasBoundingRectangle = rawPathsData.reduce((acc, curr) => {
        const xCoords = curr.map((point) => point.x);
        const yCoords = curr.map((point) => point.y);
        return {
          width: Math.max(...xCoords) - Math.min(...xCoords),
          height: Math.max(...yCoords) - Math.min(...yCoords)
        }
      }, {
        width: 0,
        height: 0
      });

      const menuElementRectangle = menuElement.getBoundingClientRect();
      const pathsData = rawPathsData.map((points) => {
        return points.map((point) => {
          return {
            x: menuElementRectangle.width * point.x / canvasBoundingRectangle.width,
            y: menuElementRectangle.width * point.y / canvasBoundingRectangle.height
          }
        })
      });

      pathsData.forEach((data) =>{
        const path = drawPathFromPoints(data, theme.colors.glow, 1, 1);
        path.width = menuElement.clientWidth;
        path.height = menuElement.clientHeight;
        pathsSVG.appendChild(path);
      })

      pathsSVG.childNodes.forEach((child) => child.classList.add('opacity-50'))
      pathsSVG.classList.add('absolute', 'z-1', 'top-0', 'left-0');
      menuElement.appendChild(pathsSVG);
    }

    const previousResizeListener = window.onresize;
    document.addEventListener('resize', () => {
      previousResizeListener && previousResizeListener();
      createPathsSVG();
    })
    createPathsSVG();
    listElements.forEach(element => {
      element.onmouseenter = () => {
        console.log('enter')
      };
    })
  }); 
</script>

<BasicPageLayout 
  title="Kamil Rybacki"
  style="flex flex-col justify-center items-center"
>
  <div class="flex flex-row justify-around items-center my-auto w-full">
    <div class="w-fit ml-auto flex flex-col items-end z-1">
      <div class="flex flex-row mr-auto">
        <div class="relative flex justify-center w-32 text-accent ml-3">
          <SVG src="images/logo" alt="Logo"/>
        </div>
        <h1 class="relative top-9 text-7xl font-display font-[700]">
          amil Rybacki
        </h1>
      </div>
      <div class="border-[1px] border-accent my-4 w-[105%] opacity-50"/>
      <h2 class="relative flex flex-row items-center text-4xl mt-2 ml-3 font-body font-[700] text-glow gap-3">
        <span class="my-auto">
          Figuring out
        </span>
        <span
          class="hero glitch layers deform text-4xl tracking-widest my-auto"
          data-text="undefineds"
          id="glitch-text"
        >
          undefineds
      </span>
      </h2>
      <Menu
        options={indexOptions}
        style='relative flex flex-row-reverse gap-6 text-5xl font-bold mt-20 items-center justify-center'
        globalListStyle="relative bg-background my-auto z-99"
        id="index-menu"
      />
    </div>
    <SplashDecoration/>
  </div>
</BasicPageLayout>
