---
interface Props {
  title?: string;
  description?: string;
  tags?: string[];
  blocks: {
    html?: string;
    js?: string;
    css?: string;
  };
  size: number;
  options?: {
    [key: string]: string;
  };
};

const { title, description, tags, blocks, size, options } = Astro.props;
const codepenId = `codepen-${title?.toLowerCase() || (new Date).getSeconds()}`;

const consolePatch = `
  window.console = {
    log: function(message) {
      window.top.postMessage({ 
        from: "${codepenId}",
        message: message
      }, '*');
    }
  }
`.replace(/\n/g, '').replace(/\s+/g, ' ').trim();

const dataOptions = Object
  .entries({
    ...options,
    title: title || "",
    description: description || "",
    tags: tags || [],
  })
  .reduce((acc, [key, value]) => {
    const kebabCaseKey = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    acc[`data-${kebabCaseKey}`] = value;
    return acc;
  }, {} as { [key: string]: string | string[] });


const removeIndentation = (code: string): string => {
  const lines = code.split('\n');
  const indentation = lines[1].match(/^\s+/)?.[0] || '      ';
  return lines
    .map(line => line.replace(indentation, ''))
    .join('\n');
}

const formattedBlocks = Object
  .entries(blocks)
  .map(([blockType, code]) => {
    const unindentedCode = removeIndentation(code);
    if (blockType === 'js' && !blocks.html) {
      code = `
        // --- Automatic console patch ---
        // --- Do not modify this code! --
        ${consolePatch}
        // -------------------------------
        ${unindentedCode}
      `;
    }
    if (blockType === 'html') {
      code = `
        <!-- --- Automatic console patch --- -->
        <!-- --- Do not modify this code! -- -->
        <script>
          ${consolePatch}
        </script>
        <!-- ------------------------------- -->
        ${unindentedCode}
      `;
    }
    return [blockType, removeIndentation(code)];
  })

---
<script define:vars={{codepenId, title}}>
  const consoleElement = document.createElement('p')
  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById(`run-${codepenId}`).addEventListener('click', () => {
      document
        .querySelectorAll('.codepen-spacer')
        .forEach(spacer => spacer.classList.replace('w-1/2', 'w-full'));

      window.__CPEmbed(".codepen-later");

      const codepenWrapper = document.getElementById(codepenId);
      codepenWrapper.classList.remove('hidden');
      codepenWrapper.classList.add(...['flex', 'flex-col', 'gap-4'])
      
      document.getElementById(`run-${codepenId}`).classList.add('hidden');

      const consoleWrapper = document.createElement('div');
      const consoleElementHeader = document.createElement('span');

      consoleElementHeader.classList.add(...['w-fit', 'font-display', 'my-2', 'text-base', 'border-2', 'border-glow', 'border-opacity-50', 'py-2', 'px-4']);
      consoleElementHeader.innerHTML = '<b>Console output</b>'

      consoleElement.classList.add(...['font-code', 'text-sm', 'py-1', 'px-2']);
      consoleElement.style.maxHeight = '10rem';
      consoleElement.style.overflowY = 'scroll';

      consoleWrapper.classList.add(...['flex', 'flex-col', 'gap-2'])

      consoleWrapper.appendChild(consoleElementHeader);
      consoleWrapper.appendChild(consoleElement);

      codepenWrapper.appendChild(consoleWrapper);
    });
    window.__CodePenIFrameAddedToPage = () => {
      window.addEventListener('message', function(event){
        if (event.data.from !== codepenId) return;
        const currentTime = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '');
        if (consoleElement.innerHTML === '') consoleElement.innerHTML = `[${currentTime}] ${event.data.message}`;
        else consoleElement.innerHTML += `<br>[${currentTime}] ${event.data.message}`
      }, false);
    }
  });
</script>

<section class="flex flex-col my-4">
  <div class="mx-auto mb-6 w-1/2 border-[1px] border-dashed opacity-25 codepen-spacer" />
  <button
    class="px-2 lg:px-4 py-1 lg:py-2 font-handwriting text-xl lg:text-3xl font-bold w-fit mx-auto"
    id={`run-${codepenId}`}
  >
    Load codepen "{title}"
  </button>
  <main id={codepenId} class="hidden p-4">
    <div
      class="codepen-later"
      data-prefill={JSON.stringify({
        title: dataOptions.title,
        description: dataOptions.description,
        tags: dataOptions.tags,
        stylesheets: [],
      })}
      {...dataOptions}
      data-border="none"
      data-height={size}
      style={`height: ${size}px; width: 100%`}
    >
      {
        formattedBlocks.map(([blockType, code]) => (
          <pre data-lang={blockType}>{code}</pre>
        ))
      }
    </div>
  </main>
  <div class="mx-auto mt-6 w-1/2 border-[1px] border-dashed opacity-25 codepen-spacer" />
</section>
