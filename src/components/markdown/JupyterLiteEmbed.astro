---
import { convertCssUnit } from '@utils/theming';

interface Props {
  size: string;
  title: string;
}

const { size, title } = Astro.props;
const jupyterliteEmbedID = `jupyterlite-embed-${title.replace(/\s/g, '-').toLowerCase()}`;
---
<script define:vars={{size, jupyterliteEmbedID}}>
  const supportedUnits = {
    'px': value => value,
    'cm': value => value * 38,
    'mm': value => value * 3.8,
    'q': value => value * 0.95,
    'in': value => value * 96,
    'pc': value => value * 16,
    'pt': value => value * 1.333333,
    'rem': value => value * parseFloat( getComputedStyle( document.documentElement ).fontSize ),
    'em': value => value * parseFloat( getComputedStyle( document.body ).fontSize ),
    'vw': value => value / 100 * window.innerWidth,
    'vh': value => value / 100 * window.innerHeight,
    'ms': value => value,
    's': value => value * 1000,
    'deg': value => value,
    'rad': value => value * ( 180 / Math.PI ),
    'grad': value => value * ( 180 / 200 ),
    'turn': value => value * 360
  };
  const convertCssUnit = function(cssValue) {
    const allUnits = Object.keys( supportedUnits ).join('|');

    const pattern = new RegExp(
      `^([\-\+]?(?:\\d+(?:\\.\\d+)?))(${allUnits})$`,
      'i'
    );

    const matches = String.prototype
      .toString
      .apply(cssValue)
      .trim()
      .match(pattern);

    if ( matches ) {
      const value = Number( matches[1] );
      const unit = matches[2].toLocaleLowerCase();
      if (unit in supportedUnits) {
        return supportedUnits[unit]( value );
      }
    }
    return cssValue;
  };
  document.addEventListener('DOMContentLoaded', () => {
    const iframe = document.getElementById(jupyterliteEmbedID);
    console.log('iframe', iframe)
    iframe.setAttribute('height', convertCssUnit(size));
  });
</script>

<iframe
  src="https://myjupyterlite.vercel.app/lab/index.html"
  width="100%"
  id={jupyterliteEmbedID}
/>
