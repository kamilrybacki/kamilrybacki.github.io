---
import StyledSVG from "@components/StyledSVG.astro";
import { parse } from 'node-html-parser';
import { Code } from "astro:components";

interface Props {
  code: string,
  language: string,
  filename: string,
  annotations?: string
}

const {code, language, filename, annotations} = Astro.props;
---
<style>
  .astro-code-content {
    @apply my-4;
    .astro-code-filename {
      @apply text-sm font-bold text-background mx-auto;
      @apply flex flex-row gap-1 items-center w-full;
      @apply mr-auto bg-foreground px-4 py-1 rounded-t-md;
    }
    .astro-code-button {
      @apply w-2 h-2 rounded-full;
      @apply bg-background;
    }
  }
</style>

<script define:vars={{ code, filename, annotations }}>
  const copyContent = async (text) => {
    try {
      await navigator.clipboard.writeText(text);
      console.log('Content copied to clipboard');
    } catch (err) {
      console.error('Failed to copy: ', err);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const codeLinesWrapper = document
      .getElementById(`astro-code-${filename}`)
      .getElementsByTagName('pre')
      .item(0);
    codeLinesWrapper.classList.add(...['rounded-b-md', 'text-sm', 'py-4', 'px-2']);
    const copyButtons = document.getElementById(`copy-${filename}`);
    copyButtons.addEventListener('click', () => {
      copyContent(
        code
          .split('\n')
          .map((line) => line.slice(4))
          .join('\n')
      );
    });
    const codeLines = Array.from(codeLinesWrapper
      .getElementsByTagName('span'))
      .filter((span) => span.classList.contains('line'));
    let foundLinesIndex = 1;
    [...codeLines].forEach((line) => {
      line.classList.add('hover:font-bold');
      const lineNumberOpacity = line.innerText.trim() ? 'opacity-25' : 'opacity-10';
      const numberSpan = document.createElement('span');
      numberSpan.classList.add(...['text-glow', lineNumberOpacity]);
      numberSpan.innerText = `${foundLinesIndex.toString().padStart(4, ' ')}`;
      line.insertBefore(
        numberSpan,
        line.firstChild
      );
      foundLinesIndex++;
    });
    const insertSingleLineComment = (line, text) => {
      const annotatedLine = codeLines[parseInt(line)-1];
      const annotationOverlay = document.createElement('div');
      annotationOverlay.setAttribute('id', `astro-code-annotation-${filename}-${line}`)
      annotationOverlay.classList.add(...[
        'absolute', 'h-fit', 'w-fit',
        'rounded-md', 'p-2', 'text-xs',
        'transition-opacity', 'duration-200', 'ease-in-out',
        'bg-background', 'bg-opacity-75', 'opacity-0',
      ]);
      annotatedLine.firstChild.classList.add('font-bold');
      annotatedLine.firstChild.classList.remove('opacity-25')
      annotatedLine.firstChild.innerText = `!${annotatedLine.firstChild.innerText.trim().padStart(3, ' ')}`;
      annotatedLine.appendChild(annotationOverlay);
      const lineBoundingRect = annotatedLine.getBoundingClientRect();
      const relativeVerticalPosition = lineBoundingRect.y - codeLinesWrapper.getBoundingClientRect().y;
      const annotationTop = relativeVerticalPosition + lineBoundingRect.height + annotationOverlay.offsetHeight / 4.0;
      const annotationLeft = lineBoundingRect.width;
      annotationOverlay.style.left = `calc(${annotationLeft}px + 1rem)`;
      annotationOverlay.style.top = `${annotationTop}px`;
      annotationOverlay.innerText = text;
      annotatedLine.onmouseenter = () => {
        annotationOverlay.style.opacity = '1';
      };
      annotatedLine.onmouseleave = () => {
        annotationOverlay.style.opacity = '0';
      };
    };
    const insertMultiLineComment = (lines, text) => {
      const [start, end] = lines.split('-');
      console.log(start, end);
    }
    annotations && annotations
      .split('\n')
      .filter((annotation) => annotation.trim() !== '')
      .forEach((annotation) => {
        const [locations, comments] = annotation.split(':');
        if (locations.includes('-')) insertMultiLineComment(locations, comments)
        else insertSingleLineComment(locations, comments);
      });
  });
</script>

<div
  class="astro-code-content relative"
  id={`astro-code-${filename}`}
>
  <div class="astro-code-filename flex gap-1">
    <div class="astro-code-button"/>
    <div class="astro-code-button"/>
    <span class="mx-auto">{filename}</span>
  </div>
  <Code 
    code={code}
    lang={language}
    theme="github-dark"
  />
  <div
    class="absolute bottom-4 right-4 cursor-pointer font-bold text-glow hover:scale-110"
    id={`copy-${filename}`}
  >
    <StyledSVG
      src="images/copy"
      alt="Copy to clipboard"
      class="h-6 w-6 text-glow"
    />
  </div>
<div>