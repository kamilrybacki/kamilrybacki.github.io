---
import StyledSVG from "@components/StyledSVG.astro";
import { Code } from "astro:components";

interface Props {
  code: string,
  language: string,
  filename: string,
  annotations?: string
}

const {code, language, filename, annotations} = Astro.props;

const preProcessCode = (inputCode: string): string => {
  const splitCode = inputCode.split('\n');
  let tab = 0;

  if (splitCode[0].trim().length === 0) {
    splitCode.shift()
  }
  else {
    tab = 4;
  }

  let preProcessedCodeLines: string[] = splitCode
    .map((line) => ' '.repeat(tab) + line);

  const lastPreprocessedCodeLine = preProcessedCodeLines[preProcessedCodeLines.length - 1];
  if (lastPreprocessedCodeLine.trim().length > 0) {
    preProcessedCodeLines.push('');
  }

  return preProcessedCodeLines.join('\n');
}

const preProcessedRawCode = preProcessCode(code);
---
<style>
  .astro-code-content {
    @apply my-4 mx-auto lg:w-3/4;
    .astro-code-filename {
      @apply text-sm font-bold text-background mx-auto;
      @apply flex flex-row gap-1 items-center w-full;
      @apply mr-auto bg-foreground px-4 py-1 rounded-t-md;
    }
    .astro-code-button {
      @apply w-2 h-2 rounded-full;
      @apply bg-background;
    }
  }
</style>

<script define:vars={{ code, filename, annotations }}>
  const copyContent = async (text) => {
    try {
      await navigator.clipboard.writeText(text);
      console.log('Content copied to clipboard');
    } catch (err) {
      console.error('Failed to copy: ', err);
    }
  }
  document.addEventListener('DOMContentLoaded', () => {
    const codeLinesWrapper = document
      .getElementById(`astro-code-${filename}`)
      .getElementsByTagName('pre')
      .item(0);
    codeLinesWrapper.classList.add(...['rounded-b-md', 'text-sm', 'pb-4', 'px-4']);
    if (!annotations) {
      codeLinesWrapper.classList.add('pt-4');
    }
    const updateCommentState = (mouseEvent, overlay, opacity) => {
      overlay.style.opacity = opacity;
      if (mouseEvent !== null) {
        overlay.style.left = `calc(${mouseEvent.x - codeLinesWrapper.getBoundingClientRect().x}px + 1rem)`
        overlay.style.top = `${mouseEvent.y - codeLinesWrapper.getBoundingClientRect().y + overlay.clientHeight}px`;
        overlay.style.maxWidth = `${codeLinesWrapper.clientWidth - mouseEvent.x}px`;
      }
    };
    const toggleLineNumbersHighlight = (lineElement, toggle) => {
      lineElement.firstChild.classList.remove(toggle ? 'opacity-50' : 'opacity-100');
      lineElement.firstChild.classList.add(toggle ? 'opacity-100' : 'opacity-50');
    };
    const appendCommentTooltip = (lineElement, text, prefix) => {
        const annotationOverlay = document.createElement('div');
        annotationOverlay.classList.add(...[
          'absolute', 'flex', 'flex-wrap', 'rounded-md', 'p-2', 'w-fit',
          'transition-opacity', 'duration-200', 'ease-in-out',
          'bg-background', 'bg-opacity-75', 'opacity-0',
        ]);
        annotationOverlay.setAttribute('role', 'tooltip')
        annotationOverlay.innerHTML = `${prefix}: ${text}`
          .split(' ')
          .map((word) => `<span>${word} </span>`)
          .join('');
        if (lineElement.lastChild.getAttribute('role') !== 'tooltip') {
          lineElement.appendChild(annotationOverlay);
          lineElement.onmouseenter = (e) => {
            updateCommentState(e, annotationOverlay, '1')
            toggleLineNumbersHighlight(lineElement, true);
          };
          lineElement.onfocus = (e) => {
            updateCommentState(e, annotationOverlay, '1');
            toggleLineNumbersHighlight(lineElement, true);
          };
          lineElement.onmousemove = (e) => {
            updateCommentState(e, annotationOverlay, '1');
          };
          lineElement.onmouseleave = () => {
            updateCommentState(null, annotationOverlay, '0');
            toggleLineNumbersHighlight(lineElement, false);
          };
        };
    };

    const insertSingleLineComment = (line, text) => {
      const annotatedLine = codeLines[parseInt(line)-1];
      annotatedLine.firstChild.classList.add('font-bold');
      annotatedLine.firstChild.innerText = `!${annotatedLine.firstChild.innerText.trim().padStart(3, ' ')}`;
      appendCommentTooltip(annotatedLine, text, '!');
    };
    const insertMultiLineComment = (lines, text) => {
      const [start, end] = lines.split('-');
      const matchingLines = codeLines
        .slice(
          parseInt(start) - 1,
          parseInt(end)
        );

      matchingLines.forEach((line, index) => {
        line.firstChild.classList.add(...['font-bold', '-mr-1']);
        if (index == 0) {
          line.firstChild.innerText = `{${line.firstChild.innerText.trim().padStart(3, ' ')}`;
        }
        if (index == parseInt(end) - parseInt(start)) {
          line.firstChild.innerText = `}${line.firstChild.innerText.trim().padStart(3, ' ')}`;
        }
        appendCommentTooltip(line, text, '{}');
      });
    };

    const legendElement = document.getElementById(`legend-${filename}`);
    if (legendElement) {
      legendElement.style.backgroundColor = document
        .getElementsByClassName(`astro-code`)[0]
        .style.backgroundColor;
    }

    const copyButtons = document.getElementById(`copy-${filename}`);
    copyButtons.addEventListener('click', () => {
      copyContent(
        code
          .split('\n')
          .map((line) => line.slice(4))
          .join('\n')
      );
    });
    const codeLines = Array.from(codeLinesWrapper
      .getElementsByTagName('span'))
      .filter((span) => span.classList.contains('line'));

    let foundLinesIndex = 1;
    codeLines.forEach((line, index) => {
      const numberSpan = document.createElement('span');
      numberSpan.classList.add(...['text-glow', 'opacity-50']);
      numberSpan.innerText = `${foundLinesIndex.toString().padStart(4, ' ')}`;
      line.insertBefore(
        numberSpan,
        line.firstChild
      );
      if (index === codeLines.length - 1) {
        line.classList.add('opacity-25')
      }
      foundLinesIndex++;
    });

    annotations && annotations
      .split('\n')
      .filter((annotation) => annotation.trim() !== '')
      .forEach((annotation) => {
        const [locations, comments] = annotation.split(':');
        if (locations.includes('-')) insertMultiLineComment(locations, comments)
        else insertSingleLineComment(locations, comments);
      });
  });
</script>

<div
  class="astro-code-content relative flex flex-col w-full"
  id={`astro-code-${filename}`}
>
  <div class="astro-code-filename flex gap-1">
    <div class="astro-code-button"/>
    <div class="astro-code-button"/>
    <span class="mx-auto pr-5">{filename}</span>
  </div>
  {
    annotations ?
    <span 
      id={`legend-${filename}`}
      class="lg:text-right text-xs font-code w-full pl-2 lg:pr-2 pb-1 pt-2 text-glow text-opacity-50"
    >
      ! - Line comment
      /
      {"{}"}  - Block comment
    </span> : null
  }
  <Code 
    code={preProcessedRawCode}
    lang={language}
    theme="github-dark"
  />
  <div
    class="absolute bottom-4 right-4 cursor-pointer font-bold text-glow hover:scale-110"
    id={`copy-${filename}`}
  >
    <StyledSVG
      src="images/copy"
      alt="Copy to clipboard"
      class="h-6 w-6 text-glow"
    />
  </div>
<div>