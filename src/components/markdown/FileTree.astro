---
interface Props {
  tree: Array<string | {
    [key: string]: Array
  }>
  root: string
  annotations?: string
  links?: string
}

const { tree, root, annotations, links } = Astro.props;

const folderSymbol = 'ðŸ–¿';
const fileSymbol = 'ðŸ“„';
const linkSymbol = 'ðŸ”—';

const mainSectionId = `astro-tree-main-${root}-${Date.now()}`
const annotationsId = `astro-tree-annotations-${root}-${Date.now()}`
---
<style>
  .astro-file-tree {
    @apply mx-4;
    .astro-tree-title {
      @apply text-sm font-bold text-background mx-auto;
      @apply flex flex-row gap-1 items-center;
      @apply mr-auto bg-foreground px-4 py-1 rounded-t-md;
    }
    .astro-tree-button {
      @apply w-2 h-2 rounded-full;
      @apply bg-background;
    }
  }
</style>

<script define:vars={{tree, mainSectionId, annotations, links, folderSymbol, fileSymbol, linkSymbol}}>

  const linksMap = links ? links
    .split('\n')
    .filter((link) => link.trim().length > 0)
    .reduce((acc, link) => {
      const splitLinkInfo = link.split(':');
      const fileName = splitLinkInfo[0].trim();
      const linkUrl = splitLinkInfo.slice(1).join(':');
      acc[fileName] = linkUrl;
      return acc;
    }, {}) : {};
  
  const traverseTreeBranch = (branch) => {
    const treeRoot = document.createElement('ol');
    treeRoot.classList.add('px-4')
    branch.forEach((leaf, index) => {
      if (leaf === Object(leaf) && !Array.isArray(leaf)) {
        const branchName = Object.keys(leaf)[0];
        const branchLeaves = Object.values(leaf)[0];

        const branchElement = document.createElement('li');
        branchElement.innerHTML = `${folderSymbol} ${branchName}`;
        const branchContent = traverseTreeBranch(branchLeaves);

        branchContent.insertBefore(
          branchElement,
          branchContent.firstChild
        );
        treeRoot.appendChild(branchContent);
      } else {
        const leafElement = document.createElement('li');
        const leafPrefix = index === branch.length - 1 ? 'â””â”€' : 'â”œâ”€';

        leafElement.innerHTML = linksMap[leaf] ? 
           `<a href=${linksMap[leaf]} target="_blank" class="hover:font-bold">${leafPrefix} ${fileSymbol} ${leaf} <span class="text-xs my-auto py-auto">${linkSymbol}</span></a>` :
          `${leafPrefix} ${fileSymbol} ${leaf}`;
        leafElement.classList.add('pl-4');

        treeRoot.appendChild(leafElement);
      }
    });
    return treeRoot;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const renderedTree = traverseTreeBranch(tree);
    document
      .getElementById(mainSectionId)
      .appendChild(renderedTree);
  });
</script>

<main class="flex flex-col-reverse lg:flex-row justify-center gap-4 mx-auto my-4 lg:w-[90%]">
  <div class="astro-file-tree mx-auto lg:w-1/3">
    <div class="astro-tree-title flex gap-1">
      <div class="astro-tree-button"/>
      <div class="astro-tree-button"/>
      <span class="mx-auto pr-5">{folderSymbol + ' '}{root}</span>
    </div>
    <section 
      id={mainSectionId}
      class="flex flex-col pt-2 pb-4 border-[1px] border-glow rounded-b-md mx-auto"
    >
      {
        links &&
        <span class="ml-auto opacity-50 text-xs pr-4 my-2">
          {linkSymbol} - link to the file
        </span>
      }
      <span class="px-4 font-bold">{root}</span>
    </section>
  </div>
  {
    annotations &&
    <section 
      id={annotationsId}
      class="w-full lg:w-fit h-full my-auto"
    >
      <span class='font-bold text-2xl underline decoration-dotted'>Comments:</span>
      <div class='h-1 lg:h-2'/>
      {
        annotations
          .split('\n')
          .filter((annotation) => annotation.trim().length > 0)
          .map((annotation) => {
              const [fileName, annotationText] = annotation.split(':');
              return (
                <div class="flex flex-row gap-1">
                  <span class="font-bold">{fileName}:</span>
                  <span>{annotationText}</span>
                </div>
              )
            }
          )
      }
    </section>
  }
</main>